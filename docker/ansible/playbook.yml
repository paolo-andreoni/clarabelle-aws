- name: Launching EC2 instances
  community.aws.ec2_instance:
    profile: "{{ aws_boto_profile }}"
    key_name: "{{ aws_demo_key }}"
    security_group: "{{ aws_security_group }}"
    instance_type: "{{ item.value.instance_type }}"
    image_id: "{{ aws_ami_id }}"
    state: present
    wait: yes
    wait_timeout: 300
    region: "{{ aws_region }}"
    tags:
       Name: "{{ item.value.name }}"
    detailed_monitoring: no
    vpc_subnet_id: "{{ vpc_subnet_list | random }}"
    network:
      assign_public_ip: yes
  loop: "{{ lookup('dict', ec2_new_list, wantlist=True) }}"

- name: Create Security group
  amazon.aws.ec2_group:
    profile: "{{ aws_boto_profile }}"
    name: "{{ aws_security_group }}"
    description: 'Security Group with SSH and HTTP rules'
    vpc_id: "{{ aws_vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports:
        - 80
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 80
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 22

- name: Create Amazon ELB
  amazon.aws.ec2_elb_lb:
    profile: "{{ aws_boto_profile }}"
    name: "{{ aws_elb_app_lb }}"
    region: "{{ aws_region }}"
    zones:
      - "{{ ap_zone1 }}"
      - "{{ ap_zone2 }}"
    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
        proxy_protocol: True
    state: present
  register: elbcreated

#- name: Deploy Webserver to EC2 instances
#  hosts: "{{ inventory_webgroup }}"
#  remote_user: ec2-user
#  become: true
#  tasks:
#    - name: Deploy Web service
#      include_role:
#        name: deploy-web-server